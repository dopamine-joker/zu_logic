// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcLogicServiceClient is the client API for RpcLogicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcLogicServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	TokenLogin(ctx context.Context, in *TokenLoginRequest, opts ...grpc.CallOption) (*TokenLoginResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error)
	UploadPic(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	DeleteGoods(ctx context.Context, in *DeleteGoodsRequest, opts ...grpc.CallOption) (*DeleteGoodsResponse, error)
	GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error)
	UserGoods(ctx context.Context, in *GetUserGoodsListRequest, opts ...grpc.CallOption) (*GetUserGoodsListResponse, error)
	GetGoodsPic(ctx context.Context, in *GetGoodsDetailRequest, opts ...grpc.CallOption) (*GetGoodsDetailResponse, error)
	SearchGoods(ctx context.Context, in *SearchGoodsRequest, opts ...grpc.CallOption) (*SearchGoodsResponse, error)
	AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
	GetBuyOrder(ctx context.Context, in *GetBuyOrderRequest, opts ...grpc.CallOption) (*GetBuyOrderResponse, error)
	GetSellOrder(ctx context.Context, in *GetSellOrderRequest, opts ...grpc.CallOption) (*GetSellOrderResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	UploadFace(ctx context.Context, in *UploadFaceRequest, opts ...grpc.CallOption) (*UploadFaceResponse, error)
	VoiceToTxt(ctx context.Context, in *VoiceToTxtRequest, opts ...grpc.CallOption) (*VoiceToTxtResponse, error)
	AddFavorites(ctx context.Context, in *AddFavoritesRequest, opts ...grpc.CallOption) (*AddFavoritesResponse, error)
	DeleteFavorites(ctx context.Context, in *DeleteFavoritesRequest, opts ...grpc.CallOption) (*DeleteFavoritesResponse, error)
	GetUserFavorites(ctx context.Context, in *GetUserFavoritesRequest, opts ...grpc.CallOption) (*GetUserFavoritesResponse, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	GetCommentByUserId(ctx context.Context, in *GetCommentByUserIdRequest, opts ...grpc.CallOption) (*GetCommentByUserIdResponse, error)
	GetCommentByGoodsId(ctx context.Context, in *GetCommentByGoodsIdRequest, opts ...grpc.CallOption) (*GetCommentByGoodsIdResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type rpcLogicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcLogicServiceClient(cc grpc.ClientConnInterface) RpcLogicServiceClient {
	return &rpcLogicServiceClient{cc}
}

func (c *rpcLogicServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) TokenLogin(ctx context.Context, in *TokenLoginRequest, opts ...grpc.CallOption) (*TokenLoginResponse, error) {
	out := new(TokenLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/TokenLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error) {
	out := new(CheckAuthResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/CheckAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) UploadPic(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/UploadPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) DeleteGoods(ctx context.Context, in *DeleteGoodsRequest, opts ...grpc.CallOption) (*DeleteGoodsResponse, error) {
	out := new(DeleteGoodsResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/DeleteGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error) {
	out := new(GetGoodsResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) UserGoods(ctx context.Context, in *GetUserGoodsListRequest, opts ...grpc.CallOption) (*GetUserGoodsListResponse, error) {
	out := new(GetUserGoodsListResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/UserGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetGoodsPic(ctx context.Context, in *GetGoodsDetailRequest, opts ...grpc.CallOption) (*GetGoodsDetailResponse, error) {
	out := new(GetGoodsDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetGoodsPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) SearchGoods(ctx context.Context, in *SearchGoodsRequest, opts ...grpc.CallOption) (*SearchGoodsResponse, error) {
	out := new(SearchGoodsResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/SearchGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	out := new(AddOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetBuyOrder(ctx context.Context, in *GetBuyOrderRequest, opts ...grpc.CallOption) (*GetBuyOrderResponse, error) {
	out := new(GetBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetSellOrder(ctx context.Context, in *GetSellOrderRequest, opts ...grpc.CallOption) (*GetSellOrderResponse, error) {
	out := new(GetSellOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) UploadFace(ctx context.Context, in *UploadFaceRequest, opts ...grpc.CallOption) (*UploadFaceResponse, error) {
	out := new(UploadFaceResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/UploadFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) VoiceToTxt(ctx context.Context, in *VoiceToTxtRequest, opts ...grpc.CallOption) (*VoiceToTxtResponse, error) {
	out := new(VoiceToTxtResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/VoiceToTxt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) AddFavorites(ctx context.Context, in *AddFavoritesRequest, opts ...grpc.CallOption) (*AddFavoritesResponse, error) {
	out := new(AddFavoritesResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/AddFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) DeleteFavorites(ctx context.Context, in *DeleteFavoritesRequest, opts ...grpc.CallOption) (*DeleteFavoritesResponse, error) {
	out := new(DeleteFavoritesResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/DeleteFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetUserFavorites(ctx context.Context, in *GetUserFavoritesRequest, opts ...grpc.CallOption) (*GetUserFavoritesResponse, error) {
	out := new(GetUserFavoritesResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetUserFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetCommentByUserId(ctx context.Context, in *GetCommentByUserIdRequest, opts ...grpc.CallOption) (*GetCommentByUserIdResponse, error) {
	out := new(GetCommentByUserIdResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetCommentByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) GetCommentByGoodsId(ctx context.Context, in *GetCommentByGoodsIdRequest, opts ...grpc.CallOption) (*GetCommentByGoodsIdResponse, error) {
	out := new(GetCommentByGoodsIdResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/GetCommentByGoodsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcLogicServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/proto.RpcLogicService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcLogicServiceServer is the server API for RpcLogicService service.
// All implementations must embed UnimplementedRpcLogicServiceServer
// for forward compatibility
type RpcLogicServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	TokenLogin(context.Context, *TokenLoginRequest) (*TokenLoginResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error)
	UploadPic(context.Context, *UploadRequest) (*UploadResponse, error)
	DeleteGoods(context.Context, *DeleteGoodsRequest) (*DeleteGoodsResponse, error)
	GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error)
	UserGoods(context.Context, *GetUserGoodsListRequest) (*GetUserGoodsListResponse, error)
	GetGoodsPic(context.Context, *GetGoodsDetailRequest) (*GetGoodsDetailResponse, error)
	SearchGoods(context.Context, *SearchGoodsRequest) (*SearchGoodsResponse, error)
	AddOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error)
	GetBuyOrder(context.Context, *GetBuyOrderRequest) (*GetBuyOrderResponse, error)
	GetSellOrder(context.Context, *GetSellOrderRequest) (*GetSellOrderResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	UploadFace(context.Context, *UploadFaceRequest) (*UploadFaceResponse, error)
	VoiceToTxt(context.Context, *VoiceToTxtRequest) (*VoiceToTxtResponse, error)
	AddFavorites(context.Context, *AddFavoritesRequest) (*AddFavoritesResponse, error)
	DeleteFavorites(context.Context, *DeleteFavoritesRequest) (*DeleteFavoritesResponse, error)
	GetUserFavorites(context.Context, *GetUserFavoritesRequest) (*GetUserFavoritesResponse, error)
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	GetCommentByUserId(context.Context, *GetCommentByUserIdRequest) (*GetCommentByUserIdResponse, error)
	GetCommentByGoodsId(context.Context, *GetCommentByGoodsIdRequest) (*GetCommentByGoodsIdResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedRpcLogicServiceServer()
}

// UnimplementedRpcLogicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRpcLogicServiceServer struct {
}

func (UnimplementedRpcLogicServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRpcLogicServiceServer) TokenLogin(context.Context, *TokenLoginRequest) (*TokenLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenLogin not implemented")
}
func (UnimplementedRpcLogicServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRpcLogicServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRpcLogicServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedRpcLogicServiceServer) CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedRpcLogicServiceServer) UploadPic(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPic not implemented")
}
func (UnimplementedRpcLogicServiceServer) DeleteGoods(context.Context, *DeleteGoodsRequest) (*DeleteGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoods not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoods not implemented")
}
func (UnimplementedRpcLogicServiceServer) UserGoods(context.Context, *GetUserGoodsListRequest) (*GetUserGoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGoods not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetGoodsPic(context.Context, *GetGoodsDetailRequest) (*GetGoodsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsPic not implemented")
}
func (UnimplementedRpcLogicServiceServer) SearchGoods(context.Context, *SearchGoodsRequest) (*SearchGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoods not implemented")
}
func (UnimplementedRpcLogicServiceServer) AddOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetBuyOrder(context.Context, *GetBuyOrderRequest) (*GetBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyOrder not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetSellOrder(context.Context, *GetSellOrderRequest) (*GetSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellOrder not implemented")
}
func (UnimplementedRpcLogicServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedRpcLogicServiceServer) UploadFace(context.Context, *UploadFaceRequest) (*UploadFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFace not implemented")
}
func (UnimplementedRpcLogicServiceServer) VoiceToTxt(context.Context, *VoiceToTxtRequest) (*VoiceToTxtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceToTxt not implemented")
}
func (UnimplementedRpcLogicServiceServer) AddFavorites(context.Context, *AddFavoritesRequest) (*AddFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavorites not implemented")
}
func (UnimplementedRpcLogicServiceServer) DeleteFavorites(context.Context, *DeleteFavoritesRequest) (*DeleteFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavorites not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetUserFavorites(context.Context, *GetUserFavoritesRequest) (*GetUserFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavorites not implemented")
}
func (UnimplementedRpcLogicServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetCommentByUserId(context.Context, *GetCommentByUserIdRequest) (*GetCommentByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByUserId not implemented")
}
func (UnimplementedRpcLogicServiceServer) GetCommentByGoodsId(context.Context, *GetCommentByGoodsIdRequest) (*GetCommentByGoodsIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByGoodsId not implemented")
}
func (UnimplementedRpcLogicServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedRpcLogicServiceServer) mustEmbedUnimplementedRpcLogicServiceServer() {}

// UnsafeRpcLogicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcLogicServiceServer will
// result in compilation errors.
type UnsafeRpcLogicServiceServer interface {
	mustEmbedUnimplementedRpcLogicServiceServer()
}

func RegisterRpcLogicServiceServer(s grpc.ServiceRegistrar, srv RpcLogicServiceServer) {
	s.RegisterService(&RpcLogicService_ServiceDesc, srv)
}

func _RpcLogicService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_TokenLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).TokenLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/TokenLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).TokenLogin(ctx, req.(*TokenLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/CheckAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).CheckAuth(ctx, req.(*CheckAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_UploadPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).UploadPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/UploadPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).UploadPic(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_DeleteGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).DeleteGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/DeleteGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).DeleteGoods(ctx, req.(*DeleteGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetGoods(ctx, req.(*GetGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_UserGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).UserGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/UserGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).UserGoods(ctx, req.(*GetUserGoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetGoodsPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetGoodsPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetGoodsPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetGoodsPic(ctx, req.(*GetGoodsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_SearchGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).SearchGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/SearchGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).SearchGoods(ctx, req.(*SearchGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).AddOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetBuyOrder(ctx, req.(*GetBuyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetSellOrder(ctx, req.(*GetSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_UploadFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).UploadFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/UploadFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).UploadFace(ctx, req.(*UploadFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_VoiceToTxt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceToTxtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).VoiceToTxt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/VoiceToTxt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).VoiceToTxt(ctx, req.(*VoiceToTxtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_AddFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).AddFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/AddFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).AddFavorites(ctx, req.(*AddFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_DeleteFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).DeleteFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/DeleteFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).DeleteFavorites(ctx, req.(*DeleteFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetUserFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetUserFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetUserFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetUserFavorites(ctx, req.(*GetUserFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetCommentByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetCommentByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetCommentByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetCommentByUserId(ctx, req.(*GetCommentByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_GetCommentByGoodsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentByGoodsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).GetCommentByGoodsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/GetCommentByGoodsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).GetCommentByGoodsId(ctx, req.(*GetCommentByGoodsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcLogicService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcLogicServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcLogicService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcLogicServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcLogicService_ServiceDesc is the grpc.ServiceDesc for RpcLogicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcLogicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RpcLogicService",
	HandlerType: (*RpcLogicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RpcLogicService_Login_Handler,
		},
		{
			MethodName: "TokenLogin",
			Handler:    _RpcLogicService_TokenLogin_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _RpcLogicService_UpdateUser_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _RpcLogicService_Register_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _RpcLogicService_Logout_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _RpcLogicService_CheckAuth_Handler,
		},
		{
			MethodName: "UploadPic",
			Handler:    _RpcLogicService_UploadPic_Handler,
		},
		{
			MethodName: "DeleteGoods",
			Handler:    _RpcLogicService_DeleteGoods_Handler,
		},
		{
			MethodName: "GetGoods",
			Handler:    _RpcLogicService_GetGoods_Handler,
		},
		{
			MethodName: "UserGoods",
			Handler:    _RpcLogicService_UserGoods_Handler,
		},
		{
			MethodName: "GetGoodsPic",
			Handler:    _RpcLogicService_GetGoodsPic_Handler,
		},
		{
			MethodName: "SearchGoods",
			Handler:    _RpcLogicService_SearchGoods_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _RpcLogicService_AddOrder_Handler,
		},
		{
			MethodName: "GetBuyOrder",
			Handler:    _RpcLogicService_GetBuyOrder_Handler,
		},
		{
			MethodName: "GetSellOrder",
			Handler:    _RpcLogicService_GetSellOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _RpcLogicService_UpdateOrder_Handler,
		},
		{
			MethodName: "UploadFace",
			Handler:    _RpcLogicService_UploadFace_Handler,
		},
		{
			MethodName: "VoiceToTxt",
			Handler:    _RpcLogicService_VoiceToTxt_Handler,
		},
		{
			MethodName: "AddFavorites",
			Handler:    _RpcLogicService_AddFavorites_Handler,
		},
		{
			MethodName: "DeleteFavorites",
			Handler:    _RpcLogicService_DeleteFavorites_Handler,
		},
		{
			MethodName: "GetUserFavorites",
			Handler:    _RpcLogicService_GetUserFavorites_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _RpcLogicService_AddComment_Handler,
		},
		{
			MethodName: "GetCommentByUserId",
			Handler:    _RpcLogicService_GetCommentByUserId_Handler,
		},
		{
			MethodName: "GetCommentByGoodsId",
			Handler:    _RpcLogicService_GetCommentByGoodsId_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _RpcLogicService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logic.proto",
}
